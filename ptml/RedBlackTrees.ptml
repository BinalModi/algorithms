<html>
    <head>
        <link href="style.css" rel="stylesheet" type="text/css"/>
        <title>
            Design and Analysis of Algorithms: Red-Black Trees
        </title>
    </head>

    <body>
<!--include menu.txt -->
        <h1>
            Design and Analysis of Algorithms: Red-Black Trees
        </h1>

            <div style="text-align:center">
                <p>
                <img
                 src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/66/Red-black_tree_example.svg/500px-Red-black_tree_example.svg.png">
                </p>
            </div>

        <details>
            <summary class="sum1">
                13.1 What is a red-black tree?
            </summary>

                <p>
                    The colors (indeed, using any color at all -- we could call
                    them 0 and 1 trees!) are arbitrary. One story from one of
                    the creators is that they had red and black pens handy!
                </p>

            <details>
                <summary class="sum2">
                    Red-black properties
                </summary>
    
                <ol>
                    <li>Every node is red or black.
                    </li>
                    <li>The root is black.
                    </li>
                    <li>Every leaf (<i>T.nil</i>) is black.
                    </li>
                    <li>If a node is red, then both of its children are
                        black. (Never two reds in a row while descending!)
                    </li>
                    <li>For each node, all paths from the node to its
                        descendant leaves contain the same number of black
                        nodes.
                    </li>
                </ol>

                <p>
                    And so, a simple way to get an intuition as
                    to why no leaf is further than
                    twice as far from the root as the nearest leaf: The
                    nearest leaf is B levels from the root. Since there is
                    never more than one R-node between any two B-nodes, at
                    most, the furthest node can be 2B - 1 levels away from
                    the root.
                </p>
            </details>

            <details>
                <summary class="sum2">
                    Operations on red-black trees
                </summary>
    
                <p>
                    <b>Remember:</b> This <i>is</i> a binary search tree.
                    <br>
                    So, non-modifying operations such as minimum(),
                    maximum(), successor(), predecessor(), and search() run
                    in O(height) time, and so for red-black trees, in O(lg
                    n) time.
                    <br>
                    <br>
                    But what about insert and delete? They are obviously
                    trickier. In fact, they are the whole trick: the
                    red-black properties are just a way of keeping the tree
                    roughly balanced.
                </p>
    
                <p>
                    But to get to insert and delete, we need to pass
                    through rotations on the way.
                </p>
            </details>
<!--include quiz13.1.qhtm -->

        </details>

        <details>
            <summary class="sum1">
                13.2 Rotations
            </summary>

            <details>
                <summary class="sum2">
                    Left Rotate
                </summary>
                
                <p>
                    Let's enter 2, 4, 6 in the:
                    <br />
                <a
            href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">
                        Red-black tree visualizer
                    </a>
                </p>
                
                <p>
                Here's the pseudo-code:
                <code>
                <pre>
                Left-Rotate(T, x)
                    y = x.right
                    x.right = y.left
                    if y.left != T.nil
                        y.left.p = x
                    y.p = x.p
                    if x.p == T.nil
                        T.root = y
                    elif x == x.p.left
                        x.p.left = y
                    else
                        x.p.right = y
                    y.left = x
                    x.p = y
                </pre>
                </code>
                </p>
            </details>

            <details>
                <summary class="sum2">
                    Right Rotate
                </summary>
                
                <p>
                    Let's enter 6, 4, 2 in the:
                    <br />
                    <a
            href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">
                        Red-black tree visualizer
                    </a>
                </p>
                <p>
                    <b>Note</b>: In-order walks of the pre- and post-rotate
                    trees produce the same output.
                </p>

            </details>

        </details>


        <details>
            <summary class="sum1">
                13.3 Insertions
            </summary>

            <details>
                <summary class="sum2">
                    Insert Animation
                </summary>

                <figure>
                    <iframe width="560" height="315"
                        src="https://www.youtube.com/embed/vDHFF4wjWYU"
                        frameborder="0" allowfullscreen>
                    </iframe>
                    <figcaption>
                    A series of insertions in a red-black tree
                    </figcaption>
                </figure>
            </details>
            
            <details>
                <summary class="sum2">
                    Code
                </summary>

                <p>
                Here's the pseudo-code:
                <code>
                <pre>
                RB-Insert(T, z)
                    y = T.nil
                    x = T.root
                    while x != T.nil
                        y = x
                        if z.key &lt; x.key
                            x = x.left
                        else
                            x = x.right
                    z.p = y
                    if y == T.nil
                        T.root = z
                    elseif z.key &lt; y.key
                        y.left = z
                    else
                        y.right = z
                    z.left = T.nil
                    z.right = T.nil
                    z.color = RED
                    RB-Insert-Fixup(T, z)
                </pre>
                </code>
                </p>
            </details>
        </details>


        <details>
            <summary class="sum1">
                13.4 Deletions
            </summary>
        </details>


        <details>
            <summary class="sum1">
                Source Code
            </summary>

            <p>
<!--include RedBlackTrees_langs.txt -->
            </p>
        </details>

        <details>
            <summary class="sum1">
                For Further Study
            </summary>
            <ul class="nested">
                <li><a
            href="https://www.cs.usfca.edu/~galles/visualization/RedBlack.html">
                        Red-black tree visualizer
                    </a>
                </li>
                <li><a href="https://en.wikipedia.org/wiki/Redâ€“black_tree">
                        Wikipedia page on red-black trees
                    </a>.
                </li>
            </ul>
        </details>
            
        <details>
            <summary class="sum1">
                Homework
            </summary>
        </details>
    </body>
<!--include google_analytics.txt -->
</html>
